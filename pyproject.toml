# Copyright 2025 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[project]
name = "charmed-hpc-benchmarks"
version = "0.1.0"
requires-python = ">=3.10"
description = "Benchmarks and tests for validating a Charmed HPC deployment. "
authors = [
    { name = "Ubuntu High-Performance Computing", email = "hpc-ubuntu-group@canonical.com" },
]
maintainers = [
    { name = "Ubuntu High-Performance Computing", email = "hpc-ubuntu-group@canonical.com" },
]
license = "Apache-2.0"
readme = "README.md"
keywords = ["HPC", "benchmarking"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "ReFrame-HPC==4.7.4",
]

[project.optional-dependencies]
dev = [
    # Linting
    "ruff",
    "codespell",
    "pyright",
]

[project.urls]
repository = "https://github.com/charmed-hpc/charmed-hpc-benchmarks.git"
issues = "https://github.com/charmed-hpc/charmed-hpc-benchmarks/issues"


# Spell checking tools configuration
[tool.codespell]
skip = "lib,venv,icon.svg,.tox,.git,.mypy_cache,.ruff_cache,.pytest_cache,.vscode,.coverage,.venv,cover,_apt.py"

# Linting tools configuration
[tool.ruff]
builtins = ["parameter", "variable", "fixture", "performance_function", "sanity_function", "run_before"]
line-length = 99
lint.select = ["E", "W", "F", "C", "N", "D", "I001"]
lint.extend-ignore = [
    "D203",
    "D204",
    "D213",
    "D215",
    "D400",
    "D404",
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
]
lint.ignore = ["E501", "D107", "N801"]
extend-exclude = ["__pycache__", "*.egg_info"]
lint.per-file-ignores = {"**/tests/*" = ["D100","D101","D102","D103","D104"]}

[tool.ruff.lint.mccabe]
max-complexity = 15
